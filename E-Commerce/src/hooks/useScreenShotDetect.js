import { useEffect, useState } from "react";

function useScreenShotDetect(callback) {
  const [pressedKeys, setPressedKeys] = useState([]);

  useEffect(() => {
    const handleKeyDown = (event) => {
      const { keyCode } = event;

      console.log("TuÅŸ BasÄ±ldÄ±:", event.key, event.code, event.keyCode);

      // EÄŸer PrintScreen tuÅŸuna basÄ±lÄ±rsa direkt ekran gÃ¶rÃ¼ntÃ¼sÃ¼ alÄ±ndÄ± mesajÄ± ver
      if (keyCode === 124) {
        console.log("ðŸ“¸ PrintScreen tuÅŸuna basÄ±ldÄ±!");
        if (callback) callback();
        return;
      }

      // EÄŸer Command (91) veya Shift (16) veya 4 (52) tuÅŸlarÄ±na basÄ±lmÄ±ÅŸsa state'e ekle
      setPressedKeys((prevKeys) => {
        if (!prevKeys.includes(keyCode)) {
          return [...prevKeys, keyCode]; // Yeni tuÅŸu ekle
        }
        return prevKeys;
      });

      console.log("BasÄ±lÄ± TuÅŸlar:", pressedKeys);

      // Command (91) ve Shift (16) basÄ±ldÄ±ysa, 4 (52) basÄ±ldÄ±ÄŸÄ±nda ekran gÃ¶rÃ¼ntÃ¼sÃ¼ alÄ±ndÄ±
      if (
        pressedKeys.includes(91) &&
        pressedKeys.includes(16) &&
        keyCode === 52
      ) {
        console.log("ðŸ“¸ Mac âŒ˜ + â‡§ + 4 ile ekran gÃ¶rÃ¼ntÃ¼sÃ¼ alÄ±ndÄ±!");
        if (callback) callback();
        setPressedKeys([]); // Stateâ€™i sÄ±fÄ±rla
      }
    };

    const handleKeyUp = (event) => {
      const { keyCode } = event;

      // BasÄ±lan tuÅŸu state'ten Ã§Ä±kar
      setPressedKeys((prevKeys) => prevKeys.filter((key) => key !== keyCode));

      // EÄŸer yanlÄ±ÅŸ bir tuÅŸa basÄ±lÄ±rsa stateâ€™i sÄ±fÄ±rla
      if (![91, 16, 52].includes(keyCode)) {
        setPressedKeys([]);
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, [callback, pressedKeys]);

  return pressedKeys;
}

export default useScreenShotDetect;
